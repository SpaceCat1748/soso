// ==UserScript==
// @name         Автокликер для игры с UI
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Автокликер для игры с настройками и интерфейсом
// @author       Ваше имя
// @match        https://dev.lovikwami-test-bot.ru/*
// @grant        GM_addStyle
// @grant        GM_getValue
// @grant        GM_setValue
// ==/UserScript==

(function() {
    'use strict';

    // Конфигурация по умолчанию
    const defaultConfig = {
        images: [
            '/static/media/game-plag.51348cff033cc07d7637.png',
            '/static/media/game-tikki.cd60f8f87755a99c8e22.png',
            '/static/media/game-trix.e23fd9a0f8b12a912110.png',
            '/static/media/game-logo-tv3.81749e579e8aa6566a53.png'
        ],
        minNumber: 1,
        maxNumber: 100,
        intervalSpeed: 200,
        enabled: true
    };

    // Загружаем сохраненную конфигурацию или используем значения по умолчанию
    let config = {
        images: GM_getValue('images', defaultConfig.images),
        minNumber: GM_getValue('minNumber', defaultConfig.minNumber),
        maxNumber: GM_getValue('maxNumber', defaultConfig.maxNumber),
        intervalSpeed: GM_getValue('intervalSpeed', defaultConfig.intervalSpeed),
        enabled: GM_getValue('enabled', defaultConfig.enabled)
    };

    let randomNumber = 0;
    let interval = null;

    // Генерируем случайное число между min и max
    function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // Функция для поиска и клика
    function clickAppGameItemWithImage(targetImageSrcList) {
        if (!config.enabled) return;

        const gameItems = document.querySelectorAll('.app-game-item');
        let found = false;

        gameItems.forEach(item => {
            const imgElement = item.querySelector('img');
            
            for (const targetImageSrc of targetImageSrcList) {
                if (imgElement && imgElement.src.includes(targetImageSrc)) {
                    const touchEvent = new TouchEvent('touchend', {
                        bubbles: true,
                        cancelable: true,
                        view: window
                    });
                    item.dispatchEvent(touchEvent);
                    console.log('Клик по:', targetImageSrc);
                    
                    if (document.querySelector(".app-coins--value")) {
                        console.log('Кол-во монет:', document.querySelector(".app-coins--value").textContent);
                        
                        // Проверяем условие для отключения
                        const coins = parseInt(document.querySelector(".app-coins--value").textContent.replace(/\D/g, ''));
                        if (coins >= randomNumber) {
                            console.log(`Достигнуто рандомное число ${randomNumber}. Автокликер отключается.`);
                            config.enabled = false;
                            GM_setValue('enabled', false);
                            updateUI();
                            clearInterval(interval);
                        }
                    }
                    
                    found = true;
                    return;
                }

                const bgImage = window.getComputedStyle(item).backgroundImage;
                if (bgImage.includes(targetImageSrc)) {
                    item.click();
                    console.log('Клик по (background):', targetImageSrc);
                    
                    if (document.querySelector(".app-coins--value")) {
                        // Проверяем условие для отключения (для background кликов)
                        const coins = parseInt(document.querySelector(".app-coins--value").textContent.replace(/\D/g, ''));
                        if (coins >= randomNumber) {
                            console.log(`Достигнуто рандомное число ${randomNumber}. Автокликер отключается.`);
                            config.enabled = false;
                            GM_setValue('enabled', false);
                            updateUI();
                            clearInterval(interval);
                        }
                    }
                    
                    found = true;
                    return;
                }
            }
        });

        if (!found) {
            console.log('Изображения не найдены. Повторяем...');
        }

        // Удаляем ненужные элементы
        document.querySelectorAll('.app-game-item.app-game-item_clicked.app-game-item_success').forEach(el => el.remove());
        document.querySelectorAll('img[src*="/static/media/game-acuma-item.3619aa78364bfbe8dba3.png"], img[src*="/static/media/game-xuppu.20d1e446975d0817cfe0.png"]').forEach(img => img.remove());
    }

    // Создаем UI
    function createUI() {
        GM_addStyle(`
            #autoclicker-ui {
                position: fixed;
                top: 20px;
                right: 20px;
                background: white;
                border: 1px solid #ccc;
                border-radius: 5px;
                padding: 15px;
                box-shadow: 0 0 10px rgba(0,0,0,0.1);
                z-index: 9999;
                font-family: Arial, sans-serif;
                width: 300px;
            }
            #autoclicker-ui h3 {
                margin-top: 0;
                color: #333;
            }
            .form-group {
                margin-bottom: 10px;
            }
            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
            }
            .form-group input, .form-group textarea {
                width: 100%;
                padding: 5px;
                box-sizing: border-box;
            }
            .form-group textarea {
                height: 80px;
                resize: vertical;
            }
            .btn {
                background: #4CAF50;
                color: white;
                border: none;
                padding: 8px 12px;
                border-radius: 3px;
                cursor: pointer;
                margin-right: 5px;
            }
            .btn:hover {
                background: #45a049;
            }
            .btn-stop {
                background: #f44336;
            }
            .btn-stop:hover {
                background: #d32f2f;
            }
            .status {
                margin-top: 10px;
                padding: 8px;
                border-radius: 3px;
            }
            .status-active {
                background: #dff0d8;
                color: #3c763d;
            }
            .status-inactive {
                background: #f2dede;
                color: #a94442;
            }
        `);

        const ui = document.createElement('div');
        ui.id = 'autoclicker-ui';
        ui.innerHTML = `
            <h3>Автокликер</h3>
            <div class="form-group">
                <label for="images-list">Пути к изображениям (каждый с новой строки):</label>
                <textarea id="images-list">${config.images.join('\n')}</textarea>
            </div>
            <div class="form-group">
                <label for="min-number">Минимальное число монет для остановки:</label>
                <input type="number" id="min-number" value="${config.minNumber}">
            </div>
            <div class="form-group">
                <label for="max-number">Максимальное число монет для остановки:</label>
                <input type="number" id="max-number" value="${config.maxNumber}">
            </div>
            <div class="form-group">
                <label for="interval-speed">Скорость кликов (мс):</label>
                <input type="number" id="interval-speed" value="${config.intervalSpeed}">
            </div>
            <div>
                <button id="save-btn" class="btn">Сохранить</button>
                ${config.enabled ? '<button id="toggle-btn" class="btn btn-stop">Остановить</button>' : '<button id="toggle-btn" class="btn">Запустить</button>'}
            </div>
            <div id="status" class="status ${config.enabled ? 'status-active' : 'status-inactive'}">
                Статус: ${config.enabled ? 'Активен' : 'Неактивен'}
            </div>
            <div id="random-number">
                Текущее целевое число: ${randomNumber}
            </div>
        `;

        document.body.appendChild(ui);

        // Обработчики событий
        document.getElementById('save-btn').addEventListener('click', saveSettings);
        document.getElementById('toggle-btn').addEventListener('click', toggleAutoclicker);
    }

    // Сохраняем настройки
    function saveSettings() {
        const imagesText = document.getElementById('images-list').value;
        config.images = imagesText.split('\n').filter(item => item.trim() !== '');
        config.minNumber = parseInt(document.getElementById('min-number').value) || defaultConfig.minNumber;
        config.maxNumber = parseInt(document.getElementById('max-number').value) || defaultConfig.maxNumber;
        config.intervalSpeed = parseInt(document.getElementById('interval-speed').value) || defaultConfig.intervalSpeed;

        GM_setValue('images', config.images);
        GM_setValue('minNumber', config.minNumber);
        GM_setValue('maxNumber', config.maxNumber);
        GM_setValue('intervalSpeed', config.intervalSpeed);

        alert('Настройки сохранены!');
        
        // Перезапускаем интервал, если он активен
        if (config.enabled) {
            clearInterval(interval);
            startAutoclicker();
        }
    }

    // Переключаем автокликер
    function toggleAutoclicker() {
        config.enabled = !config.enabled;
        GM_setValue('enabled', config.enabled);
        
        if (config.enabled) {
            startAutoclicker();
        } else {
            clearInterval(interval);
        }
        
        updateUI();
    }

    // Запускаем автокликер
    function startAutoclicker() {
        randomNumber = getRandomInt(config.minNumber, config.maxNumber);
        console.log(`Рандомное число: ${randomNumber}`);
        document.getElementById('random-number').textContent = `Текущее целевое число: ${randomNumber}`;
        
        clearInterval(interval);
        interval = setInterval(() => {
            clickAppGameItemWithImage(config.images);
        }, config.intervalSpeed);
    }

    // Обновляем UI
    function updateUI() {
        const status = document.getElementById('status');
        const toggleBtn = document.getElementById('toggle-btn');
        
        if (config.enabled) {
            status.className = 'status status-active';
            status.textContent = 'Статус: Активен';
            toggleBtn.className = 'btn btn-stop';
            toggleBtn.textContent = 'Остановить';
        } else {
            status.className = 'status status-inactive';
            status.textContent = 'Статус: Неактивен';
            toggleBtn.className = 'btn';
            toggleBtn.textContent = 'Запустить';
        }
    }

    // Инициализация
    function init() {
        createUI();
        
        if (config.enabled) {
            startAutoclicker();
        }
    }

    // Запускаем скрипт
    init();
})();
